# -*- python -*-

from os.path import splitext

bfg9000_required_version('>=0.3.0')
project('mettle', version='1.0pre')

if env.builder('c++').flavor == 'msvc':
    global_options(['/EHsc', '/std:{}'.format(argv.std)], lang='c++')
else:
    global_options(['-std={}'.format(argv.std)], lang='c++')

includes = header_directory('include', include='*.hpp')

pthread = [package('pthread')] if env.platform.flavor == 'posix' else []

if find_files('include', 'bencode.hpp', flat=True):
    bencode = []
elif argv.vendorize:
    bencode = []
    env.run(source_file('scripts/vendorize_bencode.py'))
else:
    bencode = [package('bencode', headers='bencode.hpp', libs=None)]

boost_hdrs = boost_package(version='>=1.55')
iostreams = boost_package('iostreams', version='>=1.55')
prog_opts = boost_package('program_options', version='>=1.55')

libmettle = shared_library(
    'mettle',
    files=find_files('src/libmettle', '*.cpp', extra='*.hpp'),
    includes=includes,
    packages=pthread + bencode + [iostreams, prog_opts],
)

mettle_objs = object_files(
    files=find_files('src/mettle', '*.cpp', extra='*.hpp'),
    includes=includes,
    packages=bencode + [iostreams, prog_opts],
)
mettle = executable(
    'mettle',
    files=mettle_objs,
    libs=[libmettle],
    packages=bencode + [iostreams, prog_opts],
)

install(mettle, libmettle, includes)

extra_files = {
    'test/driver/test_test_file.cpp': ['src/mettle/test_file.cpp'],
    'test/driver/test_run_test_files.cpp': [
        'src/mettle/run_test_files.cpp', 'src/mettle/test_file.cpp'
    ] + find_files('src/mettle', 'run_test_file.cpp'),
}
extra_pkgs = {
    'test/driver/test_cmd_line.cpp': [prog_opts],
    'test/driver/test_test_file.cpp': [prog_opts],
    'test/driver/test_run_test_files.cpp': [iostreams, prog_opts],
    'test/posix/test_subprocess.cpp': pthread,
}

driver = test_driver(
    [mettle, '--output=verbose'],
    environment={'TEST_DATA': 'test_data'},
)
for src in find_files('test', '*.cpp', extra='*.hpp'):
    test(executable(
        splitext(src)[0],
        files=[src] + [mettle_objs[i] for i in extra_files.get(src, [])],
        includes=includes,
        libs=libmettle,
        packages=bencode + [boost_hdrs] + extra_pkgs.get(src, []),
    ), driver=driver)

test_data = alias('test-data', [
    executable(splitext(src)[0], files=src, includes=includes, libs=libmettle,
               packages=boost_hdrs)
    for src in find_files('test_data', '*.cpp', extra='*.hpp')
])
test_deps(test_data)

header_only_examples = ['examples/test_02_header_only.cpp']
alias('examples', [
    executable(splitext(src)[0], files=src, includes=includes,
               libs=None if src in header_only_examples else libmettle,
               packages=boost_hdrs)
    for src in find_files('examples', '*.cpp', extra='*.hpp')
])

# XXX: Don't cd once MkDocs supports building from other dirs.
cd = ['cd', directory('.')]
command('doc', cmds=[cd, ['mkdocs', 'build', '--clean']])
command('doc-serve', cmds=[cd, ['mkdocs', 'serve', '--dev-addr=0.0.0.0:8000']])
command('doc-deploy', cmds=[cd, ['mkdocs', 'gh-deploy', '--clean']])

# Extra files to be packaged in the source dist.
extra_dist(files=['README.md', 'LICENSE', 'mkdocs.yml'],
           dirs=['doc', 'scripts'])
